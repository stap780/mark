namespace :discount do
  desc "Create sample discounts for testing"
  task create_samples: :environment do
    account = Account.first
    
    unless account
      puts "‚ùå No account found. Please create an account first."
      exit
    end
    
    puts "Creating sample discounts for account ##{account.id}..."
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫–∏–¥–∫–∏
    account.discounts.destroy_all
    
    # –°–∫–∏–¥–∫–∞ 1: 2 —Ç–æ–≤–∞—Ä–∞ –∏–∑ "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞" = —Å–∫–∏–¥–∫–∞ 500 —Ä—É–±
    d1 = account.discounts.create!(
      title: "–°–∫–∏–¥–∫–∞ –∑–∞ 2 —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ú—É–∂—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
      rule: <<~LIQUID.strip,
        {% assign muj_coll = "" %}
        {% for item in order_lines %}
          {% if item.colls contains "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞" %}
            {% assign muj_coll = muj_coll | append: "," | append: "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞" %}
          {% endif %}
        {% endfor %}
        {% assign muj_coll_array = muj_coll | remove_first: "," | split: "," %}
        {% if order_lines.size == muj_coll_array.size and muj_coll_array.size == 2 %}do_work{%else%}false{% endif %}
      LIQUID
      shift: 500,
      points: "money",
      notice: "–≤–∞–º —Å–∫–∏–¥–∫–∞ –∑–∞ 2 —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ú—É–∂—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
      position: 1
    )
    puts "‚úÖ Created: #{d1.title}"
    
    # –°–∫–∏–¥–∫–∞ 2: 3 —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ = —Å–∫–∏–¥–∫–∞ = —Å–∞–º–æ–º—É –¥–µ—à–µ–≤–æ–º—É —Ç–æ–≤–∞—Ä—É
    d2 = account.discounts.create!(
      title: "–°–∫–∏–¥–∫–∞ –∑–∞ 3 —Ç–æ–≤–∞—Ä–∞ = —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Ç–æ–≤–∞—Ä",
      rule: "{% if order_lines.size == 3 %}do_work_with_lower_price{% else %}false{% endif %}",
      shift: 0,
      points: "money",
      notice: "–≤–∞–º —Å–∫–∏–¥–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
      position: 2
    )
    puts "‚úÖ Created: #{d2.title}"
    
    # –°–∫–∏–¥–∫–∞ 3: –æ–±—â–∞—è —Å—É–º–º–∞ > 40000 = —Å–∫–∏–¥–∫–∞ 10%
    d3 = account.discounts.create!(
      title: "–°–∫–∏–¥–∫–∞ 10% –ø—Ä–∏ —Å—É–º–º–µ > 40000",
      rule: "{% if total_price > 40000 %}do_work{% else %}false{% endif %}",
      shift: 4650,
      points: "money",
      notice: "–≤–∞–º —Å–∫–∏–¥–∫–∞ 10% –∑–∞ –ø–æ–∫—É–ø–∫—É –Ω–∞ —Å—É–º–º—É –±–æ–ª–µ–µ 40000 —Ä—É–±",
      position: 3
    )
    puts "‚úÖ Created: #{d3.title}"
    
    puts "\n‚úÖ Created #{account.discounts.count} sample discounts"
  end
  
  desc "Test discount calculation with sample data"
  task test: :environment do
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    file_path = Rails.root.join('docs', 'discount_data.json')
    data = JSON.parse(File.read(file_path))
    
    puts "=" * 80
    puts "Testing Discount Calculation"
    puts "=" * 80
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∞ (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º)
    account = Account.first
    
    unless account
      puts "‚ùå No account found. Please create an account first."
      exit
    end
    
    puts "\nüìã Account: #{account.id}"
    puts "üìä Available discounts: #{account.discounts.count}"
    
    account.discounts.order(:position).each do |d|
      puts "  - [#{d.position}] #{d.title}"
    end
    
    puts "\nüì¶ Test data:"
    puts "  - Order lines: #{data['order_lines'].count}"
    data['order_lines'].each do |line|
      puts "    ‚Ä¢ #{line['title']}: #{line['sale_price']} RUB (collections: #{line['colls'].join(', ')})"
    end
    puts "  - Total price: #{data['total_price']} RUB"
    puts "  - Lower price: #{data['lower_price']} RUB"
    
    puts "\nüîÑ Running discount calculation..."
    puts "-" * 80
    
    result = Discounts::Calc.call(account: account, data: data)
    
    puts "\n‚úÖ Result:"
    puts JSON.pretty_generate(result)
    puts "=" * 80
  end
  
  desc "Test case when no discount matches"
  task test_no_match: :environment do
    file_path = Rails.root.join('docs', 'discount_data_no_match.json')
    data = JSON.parse(File.read(file_path))
    
    account = Account.first
    
    unless account
      puts "‚ùå No account found."
      exit
    end
    
    puts "=" * 80
    puts "Testing: NO DISCOUNT SHOULD MATCH"
    puts "=" * 80
    
    puts "\nüìã Account: #{account.id}"
    puts "üìä Available discounts: #{account.discounts.count}"
    
    account.discounts.order(:position).each do |d|
      puts "  - [#{d.position}] #{d.title}"
    end
    
    puts "\nüì¶ Test data:"
    puts "  - Order lines: #{data['order_lines'].count}"
    data['order_lines'].each do |line|
      puts "    ‚Ä¢ #{line['title']}: #{line['sale_price']} RUB (collections: #{line['colls'].join(', ')})"
    end
    puts "  - Total price: #{data['total_price']} RUB"
    
    puts "\nüîÑ Running discount calculation..."
    puts "-" * 80
    
    result = Discounts::Calc.call(account: account, data: data)
    
    puts "\n‚úÖ Result:"
    puts JSON.pretty_generate(result)
    
    if result.is_a?(Hash) && (result[:errors] || result['errors'])
      puts "\n‚úÖ CORRECT: No discount applied (as expected)"
    elsif result.is_a?(Hash) && (result[:discount] || result['discount'])
      puts "\n‚ö†Ô∏è  WARNING: A discount was applied (unexpected!)"
    else
      puts "\n‚úÖ CORRECT: No discount applied"
    end
    puts "=" * 80
  end
  
  desc "Test discount with custom account ID"
  task :test_account, [:account_id] => :environment do |t, args|
    account_id = args[:account_id] || Account.first&.id
    
    unless account_id
      puts "‚ùå No account ID provided and no accounts found."
      puts "Usage: rake discount:test_account[ACCOUNT_ID]"
      exit
    end
    
    account = Account.find_by(id: account_id)
    
    unless account
      puts "‚ùå Account with ID #{account_id} not found."
      exit
    end
    
    file_path = Rails.root.join('docs', 'discount_data.json')
    data = JSON.parse(File.read(file_path))
    
    puts "Testing discount for account: #{account.id}"
    result = Discounts::Calc.call(account: account, data: data)
    puts JSON.pretty_generate(result)
  end
end

